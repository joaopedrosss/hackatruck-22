{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green160\blue190;\red30\green32\blue40;\red255\green255\blue255;
\red219\green44\blue56;\red120\green109\blue196;\red178\green24\blue137;\red65\green161\blue192;\red131\green192\blue87;
}
{\*\expandedcolortbl;;\csgenericrgb\c0\c62600\c74600;\csgenericrgb\c11800\c12500\c15700;\csgenericrgb\c100000\c100000\c100000;
\csgenericrgb\c85900\c17100\c21900;\csgenericrgb\c46900\c42600\c77000;\csgenericrgb\c69800\c9500\c53600;\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c51200\c75400\c34300;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11740\viewh9160\viewkind0
\deftab560
\pard\tx485\pardeftab560\slleading20\qj\partightenfactor0

\f0\fs28 \cf0 As strings em linguagem Swift est\'e3o em conformidade com o Unicode, por isso, \'e9 poss\'edvel criar strings que contenham textos em diferentes idiomas:\
\
\pard\tx485\pardeftab560\slleading20\pardirnatural\qj\partightenfactor0
\cf0 Os caracteres emoji tamb\'e9m s\'e3o definidos em Unicode, por isso, tamb\'e9m podem ser inclu\'eddos em strings.\
\
Character de escape\
\
Barra invertida \\ diz ao swift \'91o seguinte deve ser tratado de forma especial\'92  - serve como comportamento de escape, pois escapa ao comportamento normal (sequencia de escape)
\fs24 \
\
\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0

\f1\fs36 \cf2 \cb3 print\cf4 (\cf5 "hihih\\nhuhii\cf4 \\(\cf6 78\cf2 *\cf6 89\cf4 )\cf5  \\"nevermind\\""\cf4 ) 
\f0\fs24 \cf0 \cb1 especial\
\
\
\

\fs28 Funcoes
\fs24 \
\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0

\f1\fs36 \cf7 \cb3 func\cf4 \cb3  \cf8 \cb3 bomDia\cf4 \cb3 ()\{\
    \cf2 print\cf4 (\cf5 "Bom dia"\cf4 )\
\}\
\
\cf7 \cb3 func\cf4 \cb3  \cf8 \cb3 saudar\cf4 \cb3 (n:\cf2 Int\cf4 )\{\
    \cf7 \cb3 switch\cf4 \cb3 (n)\{\
        \cf7 \cb3 case\cf4 \cb3  \cf6 0\cf4 :\
            \cf2 print\cf4 (\cf5 "Bom dia"\cf4 )\
        \cf7 \cb3 case\cf4 \cb3  \cf6 1\cf4 :\
            \cf2 print\cf4 (\cf5 "Boa tarde"\cf4 )\
        \cf7 \cb3 default\cf4 \cb3 :\
            \cf2 print\cf4 (\cf5 "Boa noite"\cf4 )\
    \}\
        \
\}\
\
\cf7 \cb3 func\cf4 \cb3  \cf8 \cb3 pow\cf4 \cb3 (base:\cf2 Double\cf4 ,expo:\cf2 Int\cf4 )\{\
    \cf2 print\cf4 (\cf5 "\cf4 \\(base)\cf5  \cf4 \\(expo)\cf5 "\cf4 )\
    \
\}\
\
\cf9 \cb3 saudar\cf4 \cb3 (n:\cf6 9\cf4 )\
\cf9 \cb3 pow\cf4 \cb3 (base: \cf6 2\cf4 , expo: \cf6 2\cf4 )\
\pard\tx485\pardeftab560\slleading20\pardirnatural\qj\partightenfactor0

\f0\fs28 \cf0 \cb1 seguint\
\
\
\
API\
\
Interface de Programcao de Aplicativos - Aplication Prograaming INterface\
Recursos externos para realizar uma tarefa em desenvolvimento\
\
Variaveis x constantes\
\
Connsate:\
Nome que se refere ao mesmo valor\
Use sempre que n\'e3o querer alterar um valor de uma vari\'e1vel\
Vc pode cabal mudando sem querer\
\
\
Variable:\
Posso nome que pode ter o valor alterado\
\
SWFIT RESUMA000\
\
for:\
\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0

\f1\fs36 \cf7 \cb3 for\cf4 \cb3  c \cf7 \cb3 in\cf4 \cb3  \cf6 0\cf2 ..<\cf6 4\cf4 \{\
    \cf2 print\cf4 (c)\
\}
\f0\fs28 \cf0 \cb1 \
\pard\tx485\pardeftab560\slleading20\pardirnatural\qj\partightenfactor0
\cf0 \
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0

\f1\fs36 \cf7 \cb3 for\cf4 \cb3  c \cf7 \cb3 in\cf4 \cb3  \cf6 0\cf2 ...\cf6 4\cf4 \{\
    \cf2 print\cf4 (c)\
\}\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \cb1 \
\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0

\f1\fs36 \cf7 \cb3 for\cf4 \cb3  \cf7 \cb3 _\cf4 \cb3  \cf7 \cb3 in\cf4 \cb3  \cf6 0\cf2 ...\cf6 4\cf4 \{\
    \cf2 print\cf4 (\cf5 "Faca 5 vezes"\cf4 )\
\}\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \cb1 \
\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0

\f1\fs36 \cf7 \cb3 let\cf4 \cb3  \cf8 \cb3 array\cf4 \cb3  = [\cf5 "amazonas"\cf4 ,\cf5 "rondonia"\cf4 ,\cf5 "macape"\cf4 ]\
\cf7 \cb3 for\cf4 \cb3  state \cf7 \cb3 in\cf4 \cb3   \cf9 \cb3 array\cf4 \cb3 \{\
    \cf2 print\cf4 (state)\
\}
\f0\fs28 \cf0 \cb1 \
\
\
Arrays\
\

\f1\fs36 \cf7 \cb3 var\cf4 \cb3  \cf8 \cb3 convo\cf4 \cb3  = [\cf5 "Neymar"\cf4 ,\cf5 "Csemiro"\cf4 ,\cf5 "Luiz"\cf4 ]\
\cf9 \cb3 convo\cf4 \cb3  \cf2 +=\cf4  [\cf5 "Gabigol"\cf4 ]\
\cf9 \cb3 convo\cf4 \cb3 .\cf2 append\cf4 (\cf5 "BH"\cf4 )\
\
\cf7 \cb3 for\cf4 \cb3  j \cf7 \cb3 in\cf4 \cb3  \cf6 0\cf2 ..<\cf9 \cb3 convo\cf4 \cb3 .\cf2 count\cf4 \{\
    \cf2 print\cf4 (\cf5 "\cf4 \\(j)\cf5  \cf4 \\(\cf9 \cb3 convo\cf4 \cb3 [j])\cf5 "\cf4 )\
\}\
\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0
\cf2 print\cf4 (\cf9 \cb3 convo\cf4 \cb3 .\cf2 isEmpty\cf4 )\

\f0\fs28 \cf0 \cb1 \
\
\
Funcoes\
\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0

\f1\fs36 \cf7 \cb3 func\cf4 \cb3  \cf8 \cb3 pow\cf4 \cb3 (base:\cf2 Double\cf4 , expo:\cf2 Int\cf4 ) -> \cf2 Double\cf4 \{\
    \cf7 \cb3 var\cf4 \cb3  bs:\cf2 Double\cf4  = base\
    \cf7 \cb3 for\cf4 \cb3  \cf7 \cb3 _\cf4 \cb3  \cf7 \cb3 in\cf4 \cb3  \cf6 1\cf2 ..<\cf4 expo\{\
        bs=bs\cf2 *\cf4 base\
    \}\
    \cf7 \cb3 return\cf4 \cb3  bs\
\}\
\
\cf7 \cb3 var\cf4 \cb3  \cf8 \cb3 res\cf4 \cb3 :\cf2 Double\cf4  = \cf9 \cb3 pow\cf4 \cb3 (base: \cf6 2\cf4 , expo:\cf6 5\cf4 )\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0
\cf2 print\cf4 (\cf9 \cb3 res\cf4 \cb3 )
\f0\fs28 \cf0 \cb1 \
\
\
Objetos em Swift\
\
String, Int, Double\'85 todos os tipos s\'e3o na verdade inicializadores que criam uma nova instancia, que possui meotodos e propriedades\
\
Cada instancia tem informa\'e7\'f5es associadas, ditas propriedades\
\
Efeitos colaterais: quando acontece coisas que n\'e3o tem haver com o valor de retorno\
 \
Strings em swift\
\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0

\f1\fs36 \cf7 \cb3 var\cf4 \cb3  \cf8 \cb3 nome\cf4 \cb3  = \cf2 String\cf4 ()\
\cf9 \cb3 nome\cf2 \cb3 +=\cf5 "Clara"\cf4 \
\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0
\cf2 print\cf4 (\cf9 \cb3 nome\cf4 \cb3 .\cf2 isEmpty\cf4 )\
\
\cf2 print\cf4 (\cf9 \cb3 nome\cf4 \cb3 .\cf2 count\cf4 )\
\cf2 print\cf4 (\cf9 \cb3 nome\cf2 \cb3 ==\cf5 "Clara"\cf4 )\
\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0
\cf7 \cb3 for\cf4 \cb3  letra \cf7 \cb3 in\cf4 \cb3  \cf9 \cb3 nome\cf4 \cb3 \{\
    \cf2 print\cf4 (letra,terminator:\cf5 "\\n"\cf4 )\
\}\
\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0
\cf2 print\cf4 (\cf9 \cb3 nome\cf4 \cb3 .\cf2 hasSuffix\cf4 (\cf5 "ara"\cf4 ))\
\cf2 print\cf4 (\cf5 "a"\cf2 <\cf5 "b"\cf4 )\
\
\
\cf2 print\cf4 (\cf9 \cb3 nome\cf4 \cb3 .\cf2 reversed\cf4 ())
\f0\fs28 \cf0 \cb1 \
\
\
Listas em swift\
\
\
\pard\tx890\pardeftab890\pardirnatural\partightenfactor0

\f1\fs36 \cf7 \cb3 var\cf4 \cb3  \cf8 \cb3 list\cf4 \cb3  = [\cf2 String\cf4 ]()\
\
\cf7 \cb3 var\cf4 \cb3  \cf8 \cb3 convidados\cf4 \cb3  = [\cf2 String\cf4 ]()\
\cf9 \cb3 convidados\cf4 \cb3 .\cf2 append\cf4 (\cf5 "Pel\'e9"\cf4 )\
\cf9 \cb3 convidados\cf4 \cb3 .\cf2 append\cf4 (\cf5 "Denilson"\cf4 )\
\
\cf9 \cb3 convidados\cf4 \cb3 .\cf2 insert\cf4 (\cf5 "Gabigol"\cf4 ,at:\cf6 0\cf4 )\
\
\cf9 \cb3 convidados\cf4 \cb3  \cf2 +=\cf4  [\cf5 "Xuxa"\cf4 ,\cf5 "Monica"\cf4 ]\
\
\cf7 \cb3 for\cf4 \cb3  i \cf7 \cb3 in\cf4 \cb3  \cf9 \cb3 convidados\cf4 \cb3 \{\
    \cf2 print\cf4 (i)\
\}
\f0\fs28 \cf0 \cb1 \
\
\
}